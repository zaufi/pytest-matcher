#
# SPDX-FileCopyrightText: 2024-now Alex Turbov <zaufi@pm.me>
# SPDX-License-Identifier: CC0-1.0
#

[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
# https://packaging.python.org/en/latest/specifications/pyproject-toml
name = "pytest-matcher"
description = "Easy way to match captured `pytest` output against expectations stored in files"
readme = "README.rst"
requires-python = ">=3.9"
license = { file="LICENSES/GPL-3.0-or-later.txt" }
authors = [{ name="Alex Turbov", email="zaufi@pm.me" }]
maintainers = [{ name="Alex Turbov", email="zaufi@pm.me" }]
keywords = [
    "pytest plugin"
  ]
# https://pypi.org/classifiers
classifiers = [
    "Development Status :: 5 - Production/Stable"
  , "Framework :: Pytest"
  , "Intended Audience :: Developers"
  , "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)"
  , "Natural Language :: English"
  , "Operating System :: OS Independent"
  , "Programming Language :: Python :: 3"
  , "Programming Language :: Python :: 3 :: Only"
  , "Programming Language :: Python :: 3.9"
  , "Programming Language :: Python :: 3.10"
  , "Programming Language :: Python :: 3.11"
  , "Programming Language :: Python :: 3.12"
  , "Topic :: Software Development :: Testing"
  ]
dependencies = [
    "PyYAML"
  , "pytest"
  ]
dynamic = ["version"]

[project.entry-points.pytest11]
pytest_matcher = "matcher.plugin"

[project.urls]
HowItWorks = "http://zaufi.github.io/programming/2017/07/05/extend-pytest-with-fixtures"
Code = "https://github.com/zaufi/pytest-matcher"
'Issues Tracker' = "https://github.com/zaufi/pytest-matcher/issues"
'Report an Issue' = "https://github.com/zaufi/pytest-matcher/issues/new/choose"

[tool.codespell]
builtin = "clear,rare,names,code,en-GB_to_en-US"
check-filenames = ""
context = 2
enable-colors = true
quiet-level = 3
skip = ".git,.venv,build,dist"

[tool.coverage.html]
skip_empty = true
title = "Test Coverage Report"

[tool.coverage.report]
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover"

    # Don't complain about missing debug-only code:
  , "def __repr__"
  ]

[tool.coverage.run]
branch = true
data_file = "build/.coverage"

[tool.hatch]

[tool.hatch.build]
dev-mode-dirs = ["src"]

[tool.hatch.build.targets.wheel]
packages = ["src/matcher"]

[tool.hatch.version]
source = "vcs"
tag-pattern = "release/(.*)"

[tool.hatch.envs.default]
description = "Development environment"
dependencies = [
    "codespell >= 2.2.6"
  , "isort"
  , "mypy"
  , "reuse"
  , "ruff >= 0.3.0"
  , "types-PyYAML"
  , "twine"
  , "vulture"
  , "validate-pyproject[all] >= 0.16"
  ]

[tool.hatch.envs.default.scripts]
# Some shortcut commands
all = [
    "dead-check", "dist-check", "license-check", "lint-check", "pyproject-check", "spell-check", "type-check"
  ]
# Various linter commands
dead-check = "vulture src/matcher"
dist-check = "twine check dist/*"
license-check = "reuse lint"
lint-check = "ruff check src/matcher test"
pyproject-check = "validate-pyproject {root:real}/pyproject.toml"
spell-check = "codespell"
type-check = "mypy src/matcher test"
# Testing commands
cov = "hatch env run -e test cov"
test = "hatch env run -e test test"
# Misc commands
annotate-code = "reuse annotate -c \"$(git config --get user.name) <$(git config --get user.email)>\" -t code -l GPL-3.0-or-later {args}"
annotate-misc = "reuse annotate -c \"$(git config --get user.name) <$(git config --get user.email)>\" -t misc -l CC0-1.0 {args}"
dist = "hatch build -t wheel"
fix-spelling = "codespell -i 3 -w"

[tool.hatch.envs.test]
description = "Unit tests environment"

[[tool.hatch.envs.test.matrix]]
pytest = ["pytest.8x", "pytest.7x"]

[tool.hatch.envs.test.overrides]
matrix.pytest.dependencies = [
    "coverage[toml]"
  , "pytest-cov"
  , { value = "pytest ~= 8.0", if = ["pytest.8x"] }
  , { value = "pytest ~= 7.0", if = ["pytest.7x"] }
  ]

[tool.hatch.envs.test.scripts]
cov = "pytest --cov-report term --cov-report html:build/coverage-{matrix:pytest} --cov=matcher"
show-cov = "xdg-open build/coverage-{matrix:pytest}/index.html"
test = "pytest -o cache_dir=build/.{matrix:pytest}_cache {verbosity:flag} {args}"

[tool.isort]
multi_line_output = 3
use_parentheses = true
honor_noqa = true
import_heading_stdlib = "Standard imports"
import_heading_thirdparty = "Third party packages"
import_heading_firstparty = "Project specific imports"
import_heading_localfolder = "Local imports"

[tool.mypy]
cache_dir = "build/.mypy_cache"
check_untyped_defs = true
ignore_missing_imports = true
pretty = true
warn_return_any = true
warn_unused_configs = true
warn_unused_ignores = true
warn_unreachable = true

[tool.pylint.BASIC]
const-naming-style = "UPPER_CASE"

[tool.pylint.DESIGN]
max-args = 6
max-attributes = 9
max-branches = 15
max-locals = 20
max-statements = 80
min-public-methods = 0

[tool.pylint.FORMAT]
max-line-length = 120

[tool.pylint.LOGGING]
logging-format-style = "new"

[tool.pylint.MISCELLANEOUS]
notes = []

[tool.pytest.ini_options]
addopts = "-ra"
log_cli = true
markers = [
    "wip: work in progress"
  ]
minversion = "7.0"
python_files = ["test_*.py"]
python_classes = ["*Tester"]
python_functions = ["*_test", "*_test_?", "*_test_??"]
testpaths = ["test"]

# https://docs.astral.sh/ruff/configuration/
[tool.ruff]
cache-dir = "build/.ruff_cache"
line-length = 120
output-format = "full"
target-version = "py39"

[tool.ruff.lint]
ignore = [
    "COM812"    # Trailing comma missing
  , "FIX002"    # Line contains TODO (and it's OK ;-)
  , "S101"      # Use of `assert` detected (and it's OK, especially in tests ;)
  , "TD002"     # Missing author in TODO
  , "TD003"     # Missing issue link on the line following this TODO
  , "TD004"     # Missing colon in TODO
    # TODO How to annotate `self` for Python < 3.11?.
  , "ANN101"    # Missing type annotation for `self` in method
  ]
select = ["ALL"]

[tool.ruff.lint.extend-per-file-ignores]
"test/test_*.py" = [
    "ANN001"    # Missing type annotation for function argument
  , "D"         # Documentation issues
  , "PLR2004"   # Magic value used in comparison
  ]

[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"

[tool.ruff.lint.isort]
known-first-party = ["matcher"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.vulture]
min_confidence = 61
ignore_names = ["kwargs", "args"]
